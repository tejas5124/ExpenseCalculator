/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package expensecalculator;
import javax.swing.*;
import java.awt.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
/**
 *
 * @author Tejas
 */
public class ViewPie extends javax.swing.JFrame {

    /**
     * Creates new form ViewPie
     */
    private Map<String, Double> categoryData;
    private static int getLoggedInUserId() {
    // Replace with actual logic to fetch user ID
    return 1;  // Example user ID
    }

    public ViewPie(int loggedInUserId) {
        setTitle("Spending by Category");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        categoryData = fetchCategoryData(loggedInUserId); // Fetch data from the database
        setContentPane(new PieChartPanel(categoryData)); // Set custom panel
        setLocationRelativeTo(null);
        setVisible(true);
    }
    private Map<String, Double> fetchCategoryData(int loggedInUserId) {
        Map<String, Double> data = new HashMap<>();

        try {
            // Establish connection to the database
            Connection conn = DatabaseConnection.getConnection();

            // SQL query to fetch total spending grouped by category
            String sql = "SELECT category, SUM(amount) AS total FROM expenses WHERE user_id = ? GROUP BY category";
            PreparedStatement pst = conn.prepareStatement(sql);
            pst.setInt(1, loggedInUserId);

            // Execute the query
            ResultSet rs = pst.executeQuery();

            // Process the result set and populate the map
            while (rs.next()) {
                String category = rs.getString("category");
                double total = rs.getDouble("total");
                data.put(category, total);
            }

            // Close the ResultSet and PreparedStatement
            rs.close();
            pst.close();

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error fetching data for pie chart.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        return data;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private class PieChartPanel extends JPanel {
        private Map<String, Double> data;

        public PieChartPanel(Map<String, Double> data) {
            this.data = data;
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

            if (data.isEmpty()) {
                g.drawString("No data available to display.", getWidth() / 2 - 70, getHeight() / 2);
                return;
            }

            // Calculate total value for percentages
            double total = data.values().stream().mapToDouble(Double::doubleValue).sum();

            // Pie chart starting position
            int x = 200, y = 100, width = 300, height = 300;
            int startAngle = 0;

            // Colors for the slices
            Color[] colors = {Color.RED, Color.BLUE, Color.GREEN, Color.ORANGE, Color.MAGENTA};
            int colorIndex = 0;

            // Draw each slice
            for (Map.Entry<String, Double> entry : data.entrySet()) {
                String category = entry.getKey();
                double value = entry.getValue();

                // Calculate angle
                int angle = (int) Math.round((value / total) * 360);

                // Set color
                g.setColor(colors[colorIndex % colors.length]);
                colorIndex++;

                // Draw slice
                g.fillArc(x, y, width, height, startAngle, angle);

                // Draw legend
                g.fillRect(550, 100 + (colorIndex * 20), 10, 10);
                g.setColor(Color.BLACK);
                g.drawString(category + " (" + String.format("%.2f", value) + ")", 570, 110 + (colorIndex * 20));

                startAngle += angle;
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewPie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewPie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewPie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewPie.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        int loggedInUserId = getLoggedInUserId(); // Method to fetch logged-in user's ID

        java.awt.EventQueue.invokeLater(() -> {
            new ViewPie(loggedInUserId); // Pass the dynamic logged-in user ID
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
